using System;
using System.IO;
using System.Collections.Generic;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Text.Json;

namespace Notepad_MJT
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    /// 
    class StartTimes
    {
        public DateTime Date { get; set; }
    }
    public partial class MainWindow : Window
    {
        // luodaan lista käynnistysaikoja varten
        List<StartTimes> timesLog = new List<StartTimes>
            {
            new StartTimes{Date = DateTime.Now}
            };

        int luku1 = 0;
        int luku2 = 0;
        int tulos = 0;
        int laskutapa = 0;        

        public MainWindow()
        {
            // NanoWriter lokalisointi ruotsiksi,toimii, ei käytössä
            // Set the current user interface culture to the specific culture
            /*System.Threading.Thread.CurrentThread.CurrentUICulture =
                        new System.Globalization.CultureInfo("sv-SE");
            InitializeComponent();*/
        }

        // NanoWriter toiminnot alku

        // Open File
        private void MenuItem_Click(object sender, RoutedEventArgs e)
        {
            // Configure open file dialog box
            var dialog = new Microsoft.Win32.OpenFileDialog();
            dialog.FileName = "Document"; // Default file name
            dialog.DefaultExt = ".txt"; // Default file extension
            dialog.Filter = "Text documents (.txt)|*.txt|All Files (*.*)|*.*"; // Filter files by extension

            // Show open file dialog box
            bool? result = dialog.ShowDialog();

            // Process open file dialog box results
            if (result == true)
            {
                // Open document
                string filename = dialog.FileName;

                // Character stream reading
                StreamReader reader = File.OpenText(filename);
                string lines = reader.ReadToEnd();
                Tekstilaatikko.Text = lines;
                reader.Close();
            }
        }

        //Print NanoWriter text
        private void MenuItem_Click_1(object sender, RoutedEventArgs e)
        {
            var printDialog = new PrintDialog();
            if (printDialog.ShowDialog() == true)
            {
                printDialog.PrintVisual(Tekstilaatikko, "NanoWriter teksti");
            }
        }

        // Save File
        private void MenuItem_Click_2(object sender, RoutedEventArgs e)
        {
            // Configure save file dialog box
            var dialog = new Microsoft.Win32.SaveFileDialog();
            dialog.FileName = "Document"; // Default file name
            dialog.DefaultExt = ".txt"; // Default file extension
            dialog.Filter = "Text documents (.txt)|*.txt|All Files (*.*)|*.*"; // Filter files by extension

            // Show save file dialog box
            bool? result = dialog.ShowDialog();

            // Process save file dialog box results
            if (result == true)
            {
                // Save document
                string filename = dialog.FileName;

                // Character stream writing
                StreamWriter writer = File.CreateText(filename);
                writer.WriteLine(Tekstilaatikko.Text);
                writer.Close();
            }
        }
        private void MenuItem_Click_3(object sender, RoutedEventArgs e)
        {
            Window1 mywindow = new Window1(); // tässä ikkunaluokan nimi=Window1
                                              //mywindow.Show(); // avaisi hakutyyppisen (modaalisen) ikkunan
                                              // mieluummin käytä
            mywindow.UusiTekstiPreview.Text = Tekstilaatikko.Text;
            mywindow.UusiTekstiPreview.FontSize = Tekstilaatikko.FontSize;
            mywindow.koko = Tekstilaatikko.FontSize;
            mywindow.ShowDialog();
            Tekstilaatikko.FontSize = mywindow.koko;
        }
        private void MenuItemExit_Click(object sender, RoutedEventArgs e)
        {
            
        }
        private void CloseCommandHandler(object sender, ExecutedRoutedEventArgs e)
        {
            this.Close();
        }

        // NanoWriter toiminnot loppu


        // NanoOffice näkymän valinta
        private void Button_Click_1(object sender, RoutedEventArgs e)
        {
            Tekstilaatikko.Visibility = Visibility.Visible;
            NanoDrawerCanvas.Visibility = Visibility.Collapsed;
            NanoCalculatorGrid.Visibility = Visibility.Collapsed;
            MenuItemFile.Visibility = Visibility.Visible;
            MenuItemEdit.Visibility = Visibility.Visible;
            MenuItemFormat.Visibility = Visibility.Visible;
            tekstiKentta.Visibility = Visibility.Collapsed;
            MenuItemFileD.Visibility = Visibility.Collapsed;
        }
        private void Button_Click_2(object sender, RoutedEventArgs e)
        {
            Tekstilaatikko.Visibility = Visibility.Collapsed;
            NanoDrawerCanvas.Visibility = Visibility.Visible;
            NanoCalculatorGrid.Visibility = Visibility.Collapsed;
            MenuItemFile.Visibility = Visibility.Collapsed;
            MenuItemEdit.Visibility = Visibility.Collapsed;
            MenuItemFormat.Visibility = Visibility.Collapsed;
            tekstiKentta.Visibility = Visibility.Collapsed;
            MenuItemFileD.Visibility = Visibility.Visible;
        }
        private void Button_Click_3(object sender, RoutedEventArgs e)
        {
            Tekstilaatikko.Visibility = Visibility.Collapsed;
            NanoDrawerCanvas.Visibility = Visibility.Collapsed;
            NanoCalculatorGrid.Visibility = Visibility.Visible;
            MenuItemFile.Visibility = Visibility.Collapsed;
            MenuItemEdit.Visibility = Visibility.Collapsed;
            MenuItemFormat.Visibility = Visibility.Collapsed;
            tekstiKentta.Visibility = Visibility.Collapsed;
            MenuItemFileD.Visibility = Visibility.Collapsed;
        }

        // NanoCalculator toiminnot alku
        private void Number1_Click(object sender, RoutedEventArgs e)
        {
            // asetetaan luku 2 arvo jos laskutapa on valittu (sama toiminta numerot 1-9)
            if (laskutapa != 0)
            {
                luku2 = 1;
                Display.Text = luku2.ToString();
            }
            else
            // asetetaan luku 1 arvo jos laskutapaa ei ole valittu (sama toiminta numerot 1-9)
            {
                luku1 = 1;
                Display.Text = luku1.ToString();
            }
        }
        private void Number2_Click(object sender, RoutedEventArgs e)
        {
            if (laskutapa != 0)
            {
                luku2 = 2;
                Display.Text = luku2.ToString();
            }
            else
            {
                luku1 = 2;
                Display.Text = luku1.ToString();
            }
        }
        private void Number3_Click(object sender, RoutedEventArgs e)
        {
            if (laskutapa != 0)
            {
                luku2 = 3;
                Display.Text = luku2.ToString();
            }
            else
            {
                luku1 = 3;
                Display.Text = luku1.ToString();
            }
        }
        private void Number4_Click(object sender, RoutedEventArgs e)
        {
            if (laskutapa != 0)
            {
                luku2 = 4;
                Display.Text = luku2.ToString();
            }
            else
            {
                luku1 = 4;
                Display.Text = luku1.ToString();
            }
        }
        private void Number5_Click(object sender, RoutedEventArgs e)
        {
            if (laskutapa != 0)
            {
                luku2 = 5;
                Display.Text = luku2.ToString();
            }
            else
            {
                luku1 = 5;
                Display.Text = luku1.ToString();
            }
        }
        private void Number6_Click(object sender, RoutedEventArgs e)
        {
            if (laskutapa != 0)
            {
                luku2 = 6;
                Display.Text = luku2.ToString();
            }
            else
            {
                luku1 = 6;
                Display.Text = luku1.ToString();
            }
        }
        private void Number7_Click(object sender, RoutedEventArgs e)
        {
            if (laskutapa != 0)
            {
                luku2 = 7;
                Display.Text = luku2.ToString();
            }
            else
            {
                luku1 = 7;
                Display.Text = luku1.ToString();
            }
        }
        private void Number8_Click(object sender, RoutedEventArgs e)
        {
            if (laskutapa != 0)
            {
                luku2 = 8;
                Display.Text = luku2.ToString();
            }
            else
            {
                luku1 = 8;
                Display.Text = luku1.ToString();
            }
        }
        private void Number9_Click(object sender, RoutedEventArgs e)
        {
            if (laskutapa != 0)
            {
                luku2 = 9;
                Display.Text = luku2.ToString();
            }
            else
            {
                luku1 = 9;
                Display.Text = luku1.ToString();
            }
        }

        // tallennetaan laskutapa syötteen perusteella
        private void Plus_Click(object sender, RoutedEventArgs e)
        {
            laskutapa = 1;
        }
        private void Minus_Click(object sender, RoutedEventArgs e)
        {
            laskutapa = 2;
        }
        private void Kerto_Click(object sender, RoutedEventArgs e)
        {
            laskutapa = 3;
        }
        private void Jako_Click(object sender, RoutedEventArgs e)
        {
            laskutapa = 4;
        }
        private void LaskeTulos_Click(object sender, RoutedEventArgs e)
        {
            // valitaan laskutapa syötteen perusteella
            if (laskutapa == 1)
            {
                tulos = luku1 + luku2;
                Display.Text = tulos.ToString();
            }
            else if (laskutapa == 2)
            {
                tulos = luku1 - luku2;
                Display.Text = tulos.ToString();
            }
            else if (laskutapa == 3)
            {
                tulos = luku1 * luku2;
                Display.Text = tulos.ToString();
            }
            else if (laskutapa == 4)
            {
                tulos = luku1 / luku2;
                Display.Text = tulos.ToString();
            }
            // nollataan laskutapa ja syötetyt luvut laskutapahtuman jälkeen
            laskutapa = 0;
            luku1 = 0;
            luku2 = 0;
        }
        // NanoCalculator toiminnot loppu

        private void Testi_Click(object sender, RoutedEventArgs e)
        {
            // asetetaan vain haluttu tekstikenttä jossa tallennetut käynnistysajat näkyväksi
            tekstiKentta.Visibility = Visibility.Visible;
            Tekstilaatikko.Visibility = Visibility.Collapsed;            
            NanoDrawerCanvas.Visibility = Visibility.Collapsed;
            NanoCalculatorGrid.Visibility = Visibility.Collapsed;
            MenuItemFile.Visibility = Visibility.Collapsed;
            MenuItemEdit.Visibility = Visibility.Collapsed;
            MenuItemFormat.Visibility = Visibility.Collapsed;
            MenuItemFileD.Visibility = Visibility.Collapsed;

            string runtimes = "";

            // käydään lista läpi, lisätään arvot tekstiin ja näytetään tekstikentässä
            foreach (var StartTimes in timesLog)
            {
                runtimes += "\nProgram start time: " + StartTimes.Date;
            }

            tekstiKentta.Text = runtimes;
        }
        private void MainWindow1_Loaded(object sender, RoutedEventArgs e)
        {
            if (File.Exists("Runtimes0.json"))
            {
                // luetaan data listaan pääikkunan avautuessa
                string fileName = "Runtimes0.json";
                string jsonString = File.ReadAllText(fileName);
                timesLog = JsonSerializer.Deserialize<List<StartTimes>>(jsonString);
                timesLog.Add(new StartTimes() { Date = DateTime.Now });
            }

            Tekstilaatikko.Visibility = Visibility.Collapsed;
            tekstiKentta.Visibility = Visibility.Collapsed;
            NanoDrawerCanvas.Visibility = Visibility.Collapsed;
            NanoCalculatorGrid.Visibility = Visibility.Collapsed;
            MenuItemFile.Visibility = Visibility.Collapsed;
            MenuItemEdit.Visibility = Visibility.Collapsed;
            MenuItemFormat.Visibility = Visibility.Collapsed;
            MenuItemFileD.Visibility = Visibility.Collapsed;
        }
        private void MainWindow1_Closed(object sender, EventArgs e)
        {
            // tallennus pääikkunan sulkeutuessa
            File.WriteAllText("Runtimes0.json", JsonSerializer.Serialize(timesLog));
        }
        private void MenuItemSaveD_Click(object sender, RoutedEventArgs e)
        {

            var dialog = new Microsoft.Win32.SaveFileDialog();
            dialog.FileName = "Image"; // Default file name
            dialog.DefaultExt = ".png"; // Default file extension
            dialog.Filter = "Image files (*.png)|*.png|All files (*.*)|*.*"; // Filter files by extension

            // Show save file dialog box
            bool? result = dialog.ShowDialog();

            // Process save file dialog box results

            // kuvan tallennukseen canvasista sovellettu seuraavaa koodia: https://stackoverflow.com/questions/21411878/saving-a-canvas-to-png-c-sharp-wpf
            if (result == true)
            {
                string filename = dialog.FileName;
                Rect bounds = VisualTreeHelper.GetDescendantBounds(NanoDrawerCanvas);
                double dpi = 96d;
                RenderTargetBitmap rtb = new RenderTargetBitmap((int)bounds.Width, (int)bounds.Height, dpi, dpi, System.Windows.Media.PixelFormats.Default);
                DrawingVisual dv = new DrawingVisual();

                using (DrawingContext dc = dv.RenderOpen())
                {
                    VisualBrush vb = new VisualBrush(NanoDrawerCanvas);
                    dc.DrawRectangle(vb, null, new Rect(new Point(), bounds.Size));
                }

                rtb.Render(dv);
                BitmapEncoder pngEncoder = new PngBitmapEncoder();
                pngEncoder.Frames.Add(BitmapFrame.Create(rtb));

                try
                {
                    System.IO.MemoryStream ms = new System.IO.MemoryStream();
                    pngEncoder.Save(ms);
                    ms.Close();
                    System.IO.File.WriteAllBytes(filename, ms.ToArray());
                }
                catch (Exception err)
                {
                    MessageBox.Show(err.ToString(), "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }            
        }
        private void MenuItemOpenD_Click(object sender, RoutedEventArgs e)
        {
            // Configure open file dialog box
            var dialog = new Microsoft.Win32.OpenFileDialog();
            dialog.FileName = "Image"; // Default file name
            dialog.DefaultExt = ".png"; // Default file extension
            dialog.Filter = "Image files (*.png)|*.png|All files (*.*)|*.*"; // Filter files by extension

            // Show open file dialog box
            bool? result = dialog.ShowDialog();

            // Process open file dialog box results
            if (result == true)
            {
                // Open document
                string filename = dialog.FileName;

                // apuna käytetty https://stackoverflow.com/questions/16892116/import-a-png-file-into-wpf-canvas
                ImageBrush brush = new ImageBrush();
                brush.ImageSource = new BitmapImage(new Uri(@filename, UriKind.Relative));
                NanoDrawerCanvas.Background = brush;
            }
        }

        //Print NanoDrawer image
        private void MenuItemPrintD_Click(object sender, RoutedEventArgs e)
        {
            var printDialog = new PrintDialog();
            if (printDialog.ShowDialog() == true)
            {
                printDialog.PrintVisual(NanoDrawerCanvas, "NanoDrawer kuva");
            }
        }
    }    
}
